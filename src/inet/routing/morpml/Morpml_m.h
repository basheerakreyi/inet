//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/routing/morpml/Morpml.msg.
//

#ifndef __INET_MORPML_M_H
#define __INET_MORPML_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class MorpmlBeacon;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry


namespace inet {

/**
 * Class generated from <tt>inet/routing/morpml/Morpml.msg:12</tt> by opp_msgtool.
 * <pre>
 * class MorpmlBeacon extends FieldsChunk
 * {
 *     Ipv4Address srcAddress;        // Node that generate the beacon
 *     Ipv4Address nextAddress;       // Node that transmits or re-transmits the packet    
 *     unsigned int sequenceNumber;   // Sequence number created by the source node of the beacon msg
 *     float cost;                    // Cost to reach the source node
 * 
 *     Coord nextPosition;            // Position of the next node
 *     int nodeDegree;                // Number of neighbors
 *     double residualEnergy;         // The residual energy of the node
 *     double dataRate;               // The data rate of the node
 * }
 * </pre>
 */
class INET_API MorpmlBeacon : public ::inet::FieldsChunk
{
  protected:
    Ipv4Address srcAddress;
    Ipv4Address nextAddress;
    unsigned int sequenceNumber = 0;
    float cost = 0;
    Coord nextPosition;
    int nodeDegree = 0;
    double residualEnergy = 0;
    double dataRate = 0;

  private:
    void copy(const MorpmlBeacon& other);

  protected:
    bool operator==(const MorpmlBeacon&) = delete;

  public:
    MorpmlBeacon();
    MorpmlBeacon(const MorpmlBeacon& other);
    virtual ~MorpmlBeacon();
    MorpmlBeacon& operator=(const MorpmlBeacon& other);
    virtual MorpmlBeacon *dup() const override {return new MorpmlBeacon(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Ipv4Address& getSrcAddress() const;
    virtual Ipv4Address& getSrcAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<MorpmlBeacon*>(this)->getSrcAddress());}
    virtual void setSrcAddress(const Ipv4Address& srcAddress);

    virtual const Ipv4Address& getNextAddress() const;
    virtual Ipv4Address& getNextAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<MorpmlBeacon*>(this)->getNextAddress());}
    virtual void setNextAddress(const Ipv4Address& nextAddress);

    virtual unsigned int getSequenceNumber() const;
    virtual void setSequenceNumber(unsigned int sequenceNumber);

    virtual float getCost() const;
    virtual void setCost(float cost);

    virtual const Coord& getNextPosition() const;
    virtual Coord& getNextPositionForUpdate() { handleChange();return const_cast<Coord&>(const_cast<MorpmlBeacon*>(this)->getNextPosition());}
    virtual void setNextPosition(const Coord& nextPosition);

    virtual int getNodeDegree() const;
    virtual void setNodeDegree(int nodeDegree);

    virtual double getResidualEnergy() const;
    virtual void setResidualEnergy(double residualEnergy);

    virtual double getDataRate() const;
    virtual void setDataRate(double dataRate);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MorpmlBeacon& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MorpmlBeacon& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::MorpmlBeacon *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::MorpmlBeacon*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_MORPML_M_H

